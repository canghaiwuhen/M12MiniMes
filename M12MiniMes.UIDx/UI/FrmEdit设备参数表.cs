using System;
using System.Text;
using System.Data;
using System.Drawing;
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;

using WHC.Pager.Entity;
using WHC.Dictionary;
using WHC.Framework.BaseUI;
using WHC.Framework.Commons;
using WHC.Framework.ControlUtil;
using DevExpress.XtraLayout;
using DevExpress.XtraEditors;
using DevExpress.Utils;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;
using Newtonsoft.Json;

using M12MiniMes.BLL;
using M12MiniMes.Entity;

namespace M12MiniMes.UI
{
    /// <summary>
    /// 设备表
    /// </summary>	
    public partial class FrmEdit设备参数表 : BaseEditForm
    {
    	/// <summary>
        /// 创建一个临时对象，方便在附件管理中获取存在的GUID
        /// </summary>
    	private 设备表Info tempInfo = new 设备表Info();
    	
        public FrmEdit设备参数表()
        {
            InitializeComponent();

            InitDetailGrid();
        }

        /// <summary>
        /// 初始化明细表的GridView数据显示
        /// </summary>
        private void InitDetailGrid()
        {
			//创建对应的列
            this.gridView1.Columns.Clear();
            this.gridView1.CreateColumn("ID", "编号").Visible = false;//从表的ID，必须有
            this.gridView1.CreateColumn("设备ID", "主表编号").Visible = false;
 			this.gridView1.CreateColumn("参数名称", "参数名称", 100).CreateTextEdit();
  			this.gridView1.CreateColumn("参数值", "参数值", 100).CreateTextEdit();
  			this.gridView1.CreateColumn("设备id", "设备ID", 100).CreateSpinEdit();
  			this.gridView1.CreateColumn("设备名称", "设备名称", 100).CreateTextEdit();
  
            this.gridView1.InitGridView(GridType.NewItem, false, EditorShowMode.MouseDownFocused, "");
            this.gridView1.CustomColumnDisplayText += new CustomColumnDisplayTextEventHandler(gridView1_CustomColumnDisplayText);
            this.gridView1.RowCellStyle += new RowCellStyleEventHandler(gridView1_RowCellStyle);
            this.gridView1.OptionsCustomization.AllowSort = false;
            this.gridView1.CustomDrawRowIndicator += (s, e) =>
            {
                if (e.Info.IsRowIndicator && e.RowHandle >= 0)
                {
                    e.Info.DisplayText = (e.RowHandle + 1).ToString();
                }
            };
            this.gridView1.ValidateRow += delegate(object sender, ValidateRowEventArgs e)
            {
				//如果需要校验非空输入，那么添加对应字段
                //var result = gridControl1.ValidateRowNull(e, new string[]
                //{
                //    "参数id,参数名称,参数值,设备id,设备名称"
                //});
            };
            this.gridView1.InitNewRow += (s, e) =>
            {
				//此处加入新增列的数据初始化
                gridView1.SetRowCellValue(e.RowHandle, "设备id", Guid.NewGuid().ToString());   //明细表ID
                gridView1.SetRowCellValue(e.RowHandle, "设备ID", tempInfo.设备id);//明细表的外键
                //gridView1.SetRowCellValue(e.RowHandle, "Apply_ID", tempInfo.Apply_ID);
                //gridView1.SetRowCellValue(e.RowHandle, "OccurTime", DateTime.Now);
            };
        }

        void gridView1_RowCellStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs e)
        {
            GridView gridView = this.gridView1;
            //if (e.Column.FieldName == "OrderStatus")
            //{
            //    string status = gridView.GetRowCellValue(e.RowHandle, "OrderStatus").ToString();
            //    Color color = Color.White;
            //    if (status == "已审核")
            //    {
            //        e.Appearance.BackColor = Color.Red;
            //        e.Appearance.BackColor2 = Color.LightCyan;
            //    }
            //}
        }
        void gridView1_CustomColumnDisplayText(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDisplayTextEventArgs e)
        {
            string columnName = e.Column.FieldName;
            if (e.Column.ColumnType == typeof(DateTime))
            {
                if (e.Value != null)
                {
                    if (e.Value == DBNull.Value || Convert.ToDateTime(e.Value) <= Convert.ToDateTime("1900-1-1"))
                    {
                        e.DisplayText = "";
                    }
                    else
                    {
                        e.DisplayText = Convert.ToDateTime(e.Value).ToString("yyyy-MM-dd HH:mm");//yyyy-MM-dd
                    }
                }
            }
            //else if (columnName == "DictType_ID")
            //{
            //    e.DisplayText = BLLFactory<DictType>.Instance.GetFieldValue(string.Concat(e.Value), "Name");
            //}
        }
                
        /// <summary>
        /// 实现控件输入检查的函数
        /// </summary>
        /// <returns></returns>
        public override bool CheckInput()
        {
            bool result = true;//默认是可以通过

            #region MyRegion
            #endregion

            return result;
        }

        /// <summary>
        /// 初始化数据字典
        /// </summary>
        private void InitDictItem()
        {
			//初始化代码
        }                        

        /// <summary>
        /// 数据显示的函数
        /// </summary>
        public override void DisplayData()
        {
            InitDictItem();//数据字典加载（公用）

            var list = new List<设备参数表Info>();
            if (!string.IsNullOrEmpty(ID))
            {
                #region 显示信息
                设备表Info info = BLLFactory<设备表>.Instance.FindByID(ID);
                if (info != null)
                {
					DisplayInfo(info);
                    string condition = $@"设备id = {info.设备id}";
                    list = BLLFactory<设备参数表>.Instance.Find(condition);//根据外键获取明细列表记录
                } 
                #endregion

                //this.btnOK.Enabled = HasFunction("设备表/Edit");             
            }
            else
            {
    
                //this.btnOK.Enabled = Portal.gc.HasFunction("设备表/Add");  
            }

            //统一展示明细数据，没有则绑定空数据源
            this.gridControl1.DataSource = new BindingList<设备参数表Info>(list);            
            //tempInfo在对象存在则为指定对象，新建则是全新的对象，但有一些初始化的GUID用于附件上传
            //SetAttachInfo(tempInfo);
			
            //SetPermit(); //默认不使用字段权限
        }

        private void DisplayInfo(设备表Info info)
        {
             tempInfo = info;//重新给临时对象赋值，使之指向存在的记录对象
                	
             txt设备名称.Text = info.设备名称;
                txt位置序号.Value = info.位置序号;
                txt启用状态.Text = info.启用状态.ToString();
                txt生产状态.Text = info.生产状态;
            }

        /// <summary>
        /// 设置控件字段的权限显示或者隐藏(默认不使用字段权限)
        /// </summary>
        private void SetPermit()
        {
            #region 设置控件和字段的对应关系
            //this.txt设备名称.Tag = "设备名称";
            //this.txt位置序号.Tag = "位置序号";
            //this.txt启用状态.Tag = "启用状态";
            //this.txt生产状态.Tag = "生产状态";
            #endregion
			
            //获取列表权限的列表
            //var permitDict = BLLFactory<FieldPermit>.Instance.GetColumnsPermit(typeof(设备表Info).FullName, LoginUserInfo.ID.ToInt32());
			//this.SetControlPermit(permitDict, this.layoutControl1);
		}

        //private void SetAttachInfo(设备表Info info)
        //{
        //    this.attachmentGUID.AttachmentGUID = info.AttachGUID;
        //    this.attachmentGUID.userId = LoginUserInfo.Name;

        //    string name = txtName.Text;
        //    if (!string.IsNullOrEmpty(name))
        //    {
        //        string dir = string.Format("{0}", name);
        //        this.attachmentGUID.Init(dir, tempInfo.设备id, LoginUserInfo.Name);
        //    }
        //}

        public override void ClearScreen()
        {
            this.tempInfo = new 设备表Info();
            base.ClearScreen();
        }

        /// <summary>
        /// 编辑或者保存状态下取值函数
        /// </summary>
        /// <param name="info"></param>
        private void SetInfo(设备表Info info)
        {
            info.设备名称 = txt设备名称.Text;
                info.位置序号 = Convert.ToInt32(txt位置序号.Value);
                info.启用状态 = txt启用状态.Text.ToBoolean();
                info.生产状态 = txt生产状态.Text;
            }

        /// <summary>
        /// 获取明细列表
        /// </summary>
        /// <returns></returns>
        private List<设备参数表Info> GetDetailList()
        {
            var list = new List<设备参数表Info>();
            for (int i = 0; i < this.gridView1.RowCount; i++)
            {
                var detailInfo = gridView1.GetRow(i) as 设备参数表Info;
                if (detailInfo != null)
                {
                    list.Add(detailInfo);
                }
            }
            return list;
        }
		         
        /// <summary>
        /// 新增状态下的数据保存
        /// </summary>
        /// <returns></returns>
        public override bool SaveAddNew()
        {
            设备表Info info = tempInfo;//必须使用存在的局部变量，因为部分信息可能被附件使用
            SetInfo(info);

            try
            {
                #region 新增数据

                bool succeed = BLLFactory<设备表>.Instance.Insert(info);
                if (succeed)
                {
                    //可添加其他关联操作
                    var list = GetDetailList();
                    foreach(var detailInfo in list)
                    {
                        BLLFactory<设备参数表>.Instance.InsertUpdate(detailInfo, detailInfo.参数id);
                    }
                    return true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                LogTextHelper.Error(ex);
                MessageDxUtil.ShowError(ex.Message);
            }
            return false;
        }                 

        /// <summary>
        /// 编辑状态下的数据保存
        /// </summary>
        /// <returns></returns>
        public override bool SaveUpdated()
        {

            设备表Info info = BLLFactory<设备表>.Instance.FindByID(ID);
            if (info != null)
            {
                SetInfo(info);

                try
                {
                    #region 更新数据
                    bool succeed = BLLFactory<设备表>.Instance.Update(info, info.设备id);
                    if (succeed)
                    {
                        //可添加其他关联操作
						var list = GetDetailList();
						foreach(var detailInfo in list)
						{
							BLLFactory<设备参数表>.Instance.InsertUpdate(detailInfo, detailInfo.参数id);
						}                       
                        return true;
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    LogTextHelper.Error(ex);
                    MessageDxUtil.ShowError(ex.Message);
                }
            }
           return false;
        }
    }
}
